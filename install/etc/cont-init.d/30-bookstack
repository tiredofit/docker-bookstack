#!/command/with-contenv bash

source /assets/functions/00-container
prepare_service
SERVICE_NAME="bookstack"

sanity_db
db_ready mariadb

### Logfile redirection
mkdir -p "${LOG_PATH}"
touch "${LOG_PATH}"/"${LOG_FILE}"
create_logrotate bookstack ${LOG_PATH}/${LOG_FILE} none ${NGINX_USER} ${NGINX_GROUP}
chown -R "${NGINX_USER}":"${NGINX_GROUP}" "${LOG_PATH}"
rm -rf "${NGINX_WEBROOT}"/storage/logs
ln -sf "${LOG_PATH}" "${NGINX_WEBROOT}"/storage/logs

### Check if New Install
if [ ! -f "${NGINX_WEBROOT}"/server.php ]; then
    print_warn "Potential New Installation / Standalone Installation Detected - Copying Bookstack Sourcecode"
    cp -R /assets/install/* "${NGINX_WEBROOT}"

    ### If running with /www/html or NGINX_WEBROOT mapped, then create persistent storage
    ### Storage redirection
    if [ -d "/data" ]; then
        print_warn "Detected /data directory - Persistently saving settings/sessions/cache/uploads/modules"
        if [ ! -d "/data/storage" ]; then
            cp -R "${NGINX_WEBROOT}"/storage /data
        fi
        rm -rf "${NGINX_WEBROOT}"/storage
        ln -sf /data/storage "${NGINX_WEBROOT}"/storage
        if [ ! -d "/data/uploads" ]; then
            cp -R "${NGINX_WEBROOT}"/public/uploads /data
        fi
        rm -rf "${NGINX_WEBROOT}"/public/uploads
        ln -s /data/uploads "${NGINX_WEBROOT}"/public/uploads
        if var_true "${MAP_THEMES}" ; then
            if [ ! -d "/data/themes" ]; then
                cp -R "${NGINX_WEBROOT}"/themes /data
            fi
            rm -rf "${NGINX_WEBROOT}"/themes
            ln -s /data/themes "${NGINX_WEBROOT}"/themes
        fi

        ln -sf /data/config "${NGINX_WEBROOT}"/.env
        touch /data/config
        silent chown "${NGINX_USER}":"${NGINX_GROUP}" "${NGINX_WEBROOT}"/.env
        ln -sf /data/.bookstack-version "${NGINX_WEBROOT}"/.bookstack-version
        chown -R "${NGINX_USER}":"${NGINX_GROUP}" /data
    fi

    ### Auto Upgrade functionality
    if [ ! -f "${NGINX_WEBROOT}/.bookstack-version" ]; then
        echo "${BOOKSTACK_VERSION} first installed on $(date)" >> "${NGINX_WEBROOT}"/.bookstack-version
    fi
    chown -R "${NGINX_USER}":"${NGINX_GROUP}" "${NGINX_WEBROOT}"
else
    if var_true "${ENABLE_AUTO_UPDATE}"; then
        if [ "${BOOKSTACK_VERSION}" != $(head -n 1 "${NGINX_WEBROOT}"/.bookstack-version | awk '{print $1'}) ]; then
            print_warn "Detected in place Bookstack version $(head -n 1 "${NGINX_WEBROOT}"/.bookstack-version | awk "{print $1"}) - Upgrading to ${BOOKSTACK_VERSION}"
            cp -R /assets/install/* "${NGINX_WEBROOT}"
            chown -R "${NGINX_USER}":"${NGINX_GROUP}" "${NGINX_WEBROOT}"
            cd "${NGINX_WEBROOT}" || exit
            silent sudo -u "${NGINX_USER}" sudo -u "${NGINX_USER}" php artisan migrate --force
            sed -i --follow-symlinks "1 i\
            ${BOOKSTACK_VERSION} upgraded on $(date)" "${NGINX_WEBROOT}"/.bookstack-version
        fi
    fi
fi

if [ "${SETUP_TYPE,,}" = "auto" ]; then
    print_notice "Generating Configuration"

    ### Authentication
    case "${AUTHENTICATION_TYPE,,}" in
    "standard" )
        print_debug "Setting Standard/Local Authentication"
        authentication=$(
            cat <<EOF
AUTH_METHOD=standard
EOF
        )
        ;;
    "LDAP" | "ldap" )
        print_debug "Setting LDAP Authentication"
        transform_file_var \
                        LDAP_BASE_DN \
                        LDAP_BIND_PASS \
                        LDAP_BIND_USER \
                        LDAP_HOST
        sanity_var LDAP_HOST "LDAP Hostname"
        sanity_var LDAP_BASE_DN "LDAP Base DN"
        sanity_var LDAP_BIND_USER "LDAP Bind User"
        sanity_var LDAP_BIND_PASS "LDAP Bind Password"
        if [ -n "$LDAP_SYNC_EXCLUDE_EMAIL" ] ; then
            authentication_ldap_sync_exclude=$(
                cat <<EOF
LDAP_SYNC_EXCLUDE_EMAIL="${LDAP_SYNC_EXCLUDE_EMAIL}"
EOF
        )
        fi

        if var_true "${ENABLE_LDAP_SYNC_USER}" ; then
            authentication_ldap_sync=$(
                cat <<EOF
LDAP_SYNC_USER_FILTER=${LDAP_FILTER_SYNC}
LDAP_SYNC_USER_RECURSIVE_GROUPS=${LDAP_SYNC_RECURSIVE}
${authentication_ldap_sync_exclude}
EOF
        )
        fi

        authentication=$(
            cat <<EOF
AUTH_METHOD=ldap
LDAP_SERVER=${LDAP_HOST}
LDAP_BASE_DN=${LDAP_BASE_DN}
LDAP_DN=${LDAP_BIND_USER}
LDAP_PASS=${LDAP_BIND_PASS}
LDAP_USER_FILTER=${LDAP_FILTER_USER}
LDAP_VERSION=${LDAP_VERSION}
LDAP_TLS_INSECURE=${LDAP_TLS_INSECURE}
LDAP_ID_ATTRIBUTE=${LDAP_ATTRIBUTE_ID}
LDAP_EMAIL_ATTRIBUTE=${LDAP_ATTRIBUTE_MAIL}
LDAP_DISPLAY_NAME_ATTRIBUTE=${LDAP_ATTRIBUTE_DISPLAY_NAME}
LDAP_FOLLOW_REFERRALS=${LDAP_FOLLOW_REFERRALS}
LDAP_THUMBNAIL_ATTRIBUTE=${LDAP_ATTRIBUTE_THUMBNAIL}
LDAP_DUMP_USER_DETAILS=${LDAP_DUMP_USER_DETAILS}
LDAP_USER_TO_GROUPS=${LDAP_USER_TO_GROUPS}
LDAP_GROUP_ATTRIBUTE=${LDAP_ATTRIBUTE_GROUP}
LDAP_REMOVE_FROM_GROUPS=${LDAP_REMOVE_FROM_GROUPS}
${authentication_ldap_sync}

EOF
        )
        ;;

       "oidc" | "openidconnect")
            print_debug "Setting OIDC Authentication"
            transform_file_var \
                            OIDC_CLIENT_ID \
                            OIDC_CLIENT_SECRET \
                            OIDC_ISSUER
            sanity_var OIDC_CLIENT_ID "OIDC Client ID"
            sanity_var OIDC_CLIENT_SECRET "OIDC Client Secret"
            sanity_var OIDC_ISSUER "OIDC Issuer Name"
            authentication=$(
            cat <<EOF
AUTH_METHOD=oidc
OIDC_NAME=${OIDC_NAME}
OIDC_DISPLAY_NAME_CLAIMS=${OIDC_DISPLAY_NAME_CLAIMS}
OIDC_CLIENT_ID=${OIDC_CLIENT_ID}
OIDC_CLIENT_SECRET=${OIDC_CLIENT_SECRET}
OIDC_ISSUER=${OIDC_ISSUER}
OIDC_DUMP_USER_DETAILS=${OIDC_DUMP_USER_DETAILS,,}
OIDC_ADDITIONAL_SCOPES=${OIDC_ADDITIONAL_SCOPES}
OIDC_USER_TO_GROUPS=${OIDC_USER_TO_GROUPS,,}
OIDC_GROUPS_CLAIM=${OIDC_CLAIMS_GROUP}
OIDC_REMOVE_FROM_GROUPS=${OIDC_REMOVE_FROM_GROUPS}
EOF
            )
        if var_false "${OIDC_ISSUER_DISCOVER}" ; then
            transform_file_var OIDC_PUBLIC_KEY
            sanity_var OIDC_PUBLIC_KEY "File Path to public key of provider"
            sanity_var OIDC_AUTH_ENDPOINT "Authorization Endpoint"
            sanity_var OIDC_TOKEN_ENDPOINT "Token Endpoint"
            authentication=$(
                echo "${authentication}"
                cat <<EOF
OIDC_ISSUER_DISCOVER=false
OIDC_PUBLIC_KEY=${OIDC_PUBLIC_KEY}
OIDC_AUTH_ENDPOINT=${OIDC_AUTH_ENDPOINT}
OIDC_TOKEN_ENDPOINT=${OIDC_TOKEN_ENDPOINT}
EOF
            )
        else
            authentication=$(
                echo "${authentication}"
                cat <<EOF
OIDC_ISSUER_DISCOVER=true
EOF
            )
        fi
        ;;
    "saml" | "saml2")
        print_debug "Setting SAML Authentication"
        sanity_var SAML_IDP_ENTITY_ID "SAML Entity ID"
        authentication=$(
            cat <<EOF
AUTH_METHOD=saml2
SAML2_NAME=${SAML_NAME}
SAML2_IDP_ENTITYID=${SAML_IDP_ENTITY_ID}
SAML2_AUTOLOAD_METADATA=${SAML_AUTOLOAD_METADATA}
SAML2_DISPLAY_NAME_ATTRIBUTES=${SAML_ATTRIBUTE_DISPLAY_NAME}
SAML2_EXTERNAL_ID_ATTRIBUTE=${SAML_ATTRIBUTE_EXTERNAL_ID}
SAML2_EMAIL_ATTRIBUTE=${SAML_ATTRIBUTE_MAIL}
SAML2_GROUP_ATTRIBUTE=${SAML_ATTRIBUTE_GROUP}
SAML2_DUMP_USER_DETAILS=${SAML_DUMP_USER_DETAILS}
SAML2_USER_TO_GROUPS=${SAML_USER_TO_GROUPS}
SAML2_IDP_AUTHNCONTEXT=${SAML_IDP_AUTHNCONTEXT}
SAML2_REMOVE_FROM_GROUPS=${SAML_REMOVE_FROM_GROUPS}
EOF
        )

        if var_false "${SAML_AUTOLOAD_METADATA}"; then
            sanity_var SAML_IDP_SSO_URL "SAML IDP SSO URL"
            sanity_var SAML_IDP_SLO_URL "SAML IDP SLO URL"
            sanity_var SAML_IDP_CERT "SAML IDP Certificate"
            authentication=$(
                echo "${authentication}"
                cat <<EOF
SAML2_IDP_SSO=${SAML_IDP_SSO_URL}
SAML2_IDP_SLO=${SAML_IDP_SLO_URL}
SAML2_IDP_x509=${SAML_IDP_CERT}
EOF
            )
        fi

        if [ -n "${SAML_ONELOGIN_OVERRIDES}" ]; then
            authentication=$(
                echo "${authentication}"
                cat <<EOF
SAML2_ONELOGIN_OVERRIDES=${SAML_ONELOGIN_OVERRIDES}
EOF
            )
        fi

        if [ -n "${SAML_SP_X509}" ]; then
            authentication=$(
                echo "${authentication}"
                cat <<EOF
SAML2_SP_x509=${SAML_SP_X509}
EOF
            )
        fi

        if [ -n "${SAML_SP_X509_KEY}" ]; then
            authentication=$(
                echo "${authentication}"
                cat <<EOF
SAML2_SP_x509_KEY=${SAML_SP_X509_KEY}
EOF
            )
        fi
        ;;
    *)
        authentication=$(
            cat <<EOF
AUTH_METHOD=standard
EOF
        )
        ;;
    esac

        if var_true "${ENABLE_SSO}" ; then
            transform_file_var \
                            APP_SSO_DISCOVER \
                            APP_SSO_KEY
            sso=$(
                cat <<EOF
APP_SSO_KEY=${SSO_HEADER}
APP_SSO_DISCOVER=${SSO_ATTRIBUTE}
EOF
            )
        fi

    ### Avatars
    if [ -n "${AVATAR_URL}" ]; then
        avatar=$(
            cat <<EOF
AVATAR_URL=${AVATAR_URL}
EOF
        )
    fi

    ### Cache And Sessions
    if [ "${CACHE_DRIVER,,}" = "memcached" ] || [ "${SESSION_DRIVER,,}" = "memcached" ]; then
        transform_file_var MEMCACHED_HOST
        sanity_var MEMCACHED_HOST "Memcached Hostname"
        driver_options=$(
            echo "${driver_options}"
            cat <<EOF
MEMCACHED_SERVERS=${MEMCACHED_HOST}:${MEMCACHED_PORT}:${MEMCACHED_WEIGHT}
EOF
        )
    fi

    if [ "${CACHE_DRIVER,,}" = "redis" ] || [ "${SESSION_DRIVER,,}" = "redis" ]; then
        transform_file_var \
                        REDIS_HOST \
                        REDIS_PORT \
                        REDIS_DB \
                        REDIS_PASS
        sanity_var REDIS_HOST "Redis Hostname"
        sanity_var REDIS_HOST "Redis Password"
        db_ready redis
        driver_options=$(
            echo "${driver_options}"
            cat <<EOF
REDIS_SERVERS=${REDIS_HOST:-localhost}:${REDIS_PORT:-6379}:${REDIS_DB:-0}${REDIS_PASS:+:${REDIS_PASS}}
EOF
        )
    fi

    ### DrawIO
    if var_true "${ENABLE_DRAWIO}"; then
        transform_file_var \
                        DRAWIO_HOST
        if [ -z "${DRAWIO_HOST}" ]; then
            drawio=true
        else
            drawio="${DRAWIO_HOST}?embed=1&proto=json&spin=1"
        fi
    else
        drawio=false
    fi

    ### External Logins
    if var_true "${ENABLE_LOGIN_AZURE}"; then
        transform_file_var \
                        AZURE_APP_ID \
                        AZURE_APP_SECRET \
                        AZURE_TENANT
        sanity_var AZURE_APP_ID "Azure App ID"
        sanity_var AZURE_APP_SECRET "Azure App Secret"
        sanity_var AZURE_TENANT "Azure Tenant ID"
        login=$(
            echo "${login}"
            cat <<EOF
AZURE_APP_ID=${AZURE_APP_ID}
AZURE_APP_SECRET=${AZURE_APP_SECRET}
AZURE_TENANT=${AZURE_TENANT}
AZURE_AUTO_REGISTER=${AZURE_AUTO_REGISTER}
AZURE_AUTO_CONFIRM_EMAIL=${AZURE_AUTO_CONFIRM_EMAIL}
EOF
        )
    fi

    if var_true "${ENABLE_LOGIN_DISCORD}"; then
        transform_file_var \
                        DISCORD_APP_ID \
                        DISCORD_APP_SECRET
        sanity_var DISCORD_APP_ID "Discord App ID"
        sanity_var DISCORD_APP_SECRET "Discord App Secret"
        login=$(
            echo "${login}"
            cat <<EOF
DISCORD_APP_ID=${DISCORD_APP_ID}
DISCORD_APP_SECRET=${DISCORD_APP_SECRET}
DISCORD_AUTO_REGISTER=${DISCORD_AUTO_REGISTER}
DISCORD_AUTO_CONFIRM_EMAIL=${DISCORD_AUTO_CONFIRM_EMAIL}
EOF
        )
    fi

    if var_true "${ENABLE_LOGIN_FACEBOOK}"; then
        transform_file_var \
                        FACEBOOK_APP_ID \
                        FACEBOOK_APP_SECRET
        sanity_var FACEBOOK_APP_ID "Facebook App ID"
        sanity_var FACEBOOK_APP_SECRET "Facebook App Secret"
        login=$(
            echo "${login}"
            cat <<EOF
FACEBOOK_APP_ID=${FACEBOOK_APP_ID}
FACEBOOK_APP_SECRET=${FACEBOOK_APP_SECRET}
FACEBOOK_AUTO_REGISTER=${FACEBOOK_AUTO_REGISTER}
FACEBOOK_AUTO_CONFIRM_EMAIL=${FACEBOOK_AUTO_CONFIRM_EMAIL}
EOF
        )
    fi

    if var_true "${ENABLE_LOGIN_GITHUB}"; then
        transform_file_var \
                        GITHUB_APP_ID \
                        GITHUB_APP_SECRET
        sanity_var GITHUB_APP_ID "Github App ID"
        sanity_var GITHUB_APP_SECRET "Github App Secret"
        login=$(
            echo "${login}"
            cat <<EOF
GITHUB_APP_ID=${GITHUB_APP_ID}
GITHUB_APP_SECRET=${GITHUB_APP_SECRET}
GITHUB_AUTO_REGISTER=${GITHUB_AUTO_REGISTER}
GITHUB_AUTO_CONFIRM_EMAIL=${GITHUB_AUTO_CONFIRM_EMAIL}
EOF
        )
    fi

    if var_true "${ENABLE_LOGIN_GITLAB}"; then
        transform_file_var \
                        GITLAB_APP_ID \
                        GITLAB_APP_SECRET \
                        GITLAB_BASE_URI
        sanity_var GITLAB_APP_ID "Gitlab App ID"
        sanity_var GITLAB_APP_SECRET "Gitlab App Secret"
        sanity_var GITLAB_BASE_URI "Gitlab Base URI"
        login=$(
            echo "${login}"
            cat <<EOF
GITLAB_APP_ID=${GITLAB_APP_ID}
GITLAB_APP_SECRET=${GITLAB_APP_SECRET}
GITLAB_BASE_URI=${GITLAB_BASE_URI}
GITLAB_AUTO_REGISTER=${GITLAB_AUTO_REGISTER}
GITLAB_AUTO_CONFIRM_EMAIL=${GITLAB_AUTO_CONFIRM_EMAIL}
EOF
        )
    fi

    if var_true "${ENABLE_LOGIN_GOOGLE}"; then
        transform_file_var \
                        GOOGLE_APP_ID \
                        GOOGLE_APP_SECRET \
                        GOOGLE_SELECT_ACCOUNT
        sanity_var GOOGLE_APP_ID "Google App ID"
        sanity_var GOOGLE_APP_SECRET "Google App Secret"
        sanity_var GOOGLE_SELECT_ACCOUNT "Google Account Selection"
        login=$(
            echo "${login}"
            cat <<EOF
GOOGLE_APP_ID=${GGOGLE_APP_ID}
GOOGLE_APP_SECRET=${GOOGLE_APP_SECRET}
GOOGLE_AUTO_REGISTER=${GOOGLE_AUTO_REGISTER}
GOOGLE_AUTO_CONFIRM_EMAIL=${GOOGLE_AUTO_CONFIRM_EMAIL}
GOOGLE_SELECT_ACCOUNT=${GOOGLE_SELECT_ACCOUNT}
EOF
        )
    fi

    if var_true "${ENABLE_LOGIN_OKTA}"; then
        transform_file_var \
                OKTA_APP_ID \
                OKTA_APP_SECRET \
                OKTA_BASE_URL
        sanity_var OKTA_APP_ID "Okta App ID"
        sanity_var OKTA_APP_SECRET "Okta App Secret"
        sanity_var OKTA_BASE_URL "Okta Base URL"
        login=$(
            echo "${login}"
            cat <<EOF
OKTA_BASE_URL=${OKTA_BASE_URL}
OKTA_APP_ID=${OKTA_APP_ID}
OKTA_APP_SECRET=${OKTA_APP_SECRET}
OKTA_AUTO_REGISTER=${OKTA_AUTO_REGISTER}
OKTA_AUTO_CONFIRM_EMAIL=${OKTA_AUTO_CONFIRM_EMAIL}
EOF
        )
    fi

    if var_true "${ENABLE_LOGIN_SLACK}"; then
        transform_file_var \
                        SLACK_APP_ID \
                        SLACK_APP_SECRET
        sanity_var SLACK_APP_ID "Slack App ID"
        sanity_var SLACK_APP_SECRET "Slack App Secret"
        login=$(
            echo "${login}"
            cat <<EOF
SLACK_APP_ID=${SLACK_APP_ID}
SLACK_APP_SECRET=${SLACK_APP_SECRET}
SLACK_AUTO_REGISTER=${SLACK_AUTO_REGISTER}
SLACK_AUTO_CONFIRM_EMAIL=${SLACK_AUTO_CONFIRM_EMAIL}
EOF
        )
    fi

    if var_true "${ENABLE_LOGIN_TWITCH}"; then
        transform_file_var \
                        TWITCH_APP_ID \
                        TWITCH_APP_SECRET
        sanity_var TWITCH_APP_ID "Twitch App ID"
        sanity_var TWITCH_APP_SECRET "Twitch App Secret"
        login=$(
            echo "${login}"
            cat <<EOF
TWITCH_APP_ID=${TWITCH_APP_ID}
TWITCH_APP_SECRET=${TWITCH_APP_SECRET}
TWITCH_AUTO_REGISTER=${TWITCH_AUTO_REGISTER}
TWITCH_AUTO_CONFIRM_EMAIL=${TWITCH_AUTO_CONFIRM_EMAIL}
EOF
        )
    fi

    if var_true "${ENABLE_LOGIN_TWITTER}"; then
        transform_file_var \
                        TWITTER_APP_ID \
                        TWITTER_APP_SECRET
        sanity_var TWITTER_APP_ID "Twitter App ID"
        sanity_var TWITTER_APP_SECRET "Twitter App Secret"
        login=$(
            echo "${login}"
            cat <<EOF
TWITTER_APP_ID=${TWITTER_APP_ID}
TWITTER_APP_SECRET=${TWITTER_APP_SECRET}
TWITTER_AUTO_REGISTER=${TWITTER_AUTO_REGISTER}
TWITTER_AUTO_CONFIRM_EMAIL=${TWITTER_AUTO_CONFIRM_EMAIL}
EOF
        )
    fi

    ### Mail Setup
    case "${MAIL_TYPE,,}" in
    "container" | "php" | "sendmail" )
        mail=$(
            cat <<EOF
MAIL_DRIVER=sendmail
MAIL_FROM=${MAIL_FROM}
MAIL_FROM_NAME=${MAIL_FROM_NAME}
EOF
        )
        ;;
    "smtp")
        transform_file_var \
                        SMTP_HOST \
                        SMTP_PASS \
                        SMTP_PORT \
                        SMTP_USER
        sanity_var SMTP_HOST "SMTP Host"
        mail=$(
            cat <<EOF
MAIL_DRIVER=smtp
MAIL_FROM=${MAIL_FROM}
MAIL_FROM_NAME=${MAIL_FROM_NAME}
MAIL_HOST=${SMTP_HOST}
MAIL_PORT=${SMTP_PORT}
EOF
        )

        if [ -n "${SMTP_USER}" ]; then

            mail=$(
                echo "${mail}"
                cat <<EOF
MAIL_USERNAME=${SMTP_USER}
EOF
            )
        fi

        if [ -n "${SMTP_PASS}" ]; then
            mail=$(
                echo "${mail}"
                cat <<EOF
MAIL_PASSWORD=${SMTP_PASS}
EOF
            )
        fi

        if var_true "$SMTP_ENABLE_TLS"; then
            mail=$(
                echo "${mail}"
                cat <<EOF
MAIL_ENCRYPTION=tls
EOF
            )
        else
            mail=$(
                echo "${mail}"
                cat <<EOF
MAIL_ENCRYPTION=none
EOF
            )
        fi
        ;;
    esac

    ### Storage Setup
    case "${STORAGE_TYPE,,}" in
    "s3" | "minio" )
        transform_file_var \
                        STORAGE_S3_BUCKET \
                        STORAGE_S3_ENDPOINT \
                        STORAGE_S3_KEY \
                        STORAGE_S3_REGION \
                        STORAGE_S3_SECRET
        sanity_var STORAGE_S3_KEY "S3 Key"
        sanity_var STORAGE_S3_SECRET "S3 Secret"
        storage=$(
            cat <<EOF
STORAGE_S3_KEY=${STORAGE_S3_KEY}
STORAGE_S3_SECRET=${STORAGE_S3_SECRET}
STORAGE_S3_BUCKET=${STORAGE_S3_BUCKET}
STORAGE_S3_REGION=${STORAGE_S3_REGION}
STORAGE_S3_ENDPOINT=${STORAGE_S3_ENDPOINT}
EOF
        )

        if [ -n "${STORAGE_URL}" ]; then
            STORAGE_URL=${STORAGE_URL}
            storage=$(
                echo "${storage}"
                cat <<EOF
STORAGE_URL=${STORAGE_URL}
EOF
            )
        fi
        ;;

    *)
        storage=$(
            cat <<EOF
STORAGE_TYPE=${STORAGE_TYPE}
STORAGE_IMAGE_TYPE=${STORAGE_IMAGE_TYPE}
STORAGE_ATTACHMENT_TYPE=${STORAGE_ATTACHMENT_TYPE}
EOF
        )
        ;;
    esac

    ### IFrame Security
    if [ -n "${ALLOWED_IFRAME_HOSTS}" ] ; then
        iframehosts="ALLOWED_IFRAME_HOSTS=${ALLOWED_IFRAME_HOSTS}"
    fi

    ### IFrame Security
    if [ -n "${ALLOWED_SSR_HOSTS_HOSTS}" ] ; then
        ssrhosts="ALLOWED_SSR_HOSTS=\"${ALLOWED_SSR_HOSTS}\""
    fi

    ### Write the Configuration File
    transform_file_var APP_KEY
    cat >"${NGINX_WEBROOT}"/.env <<EOF
## Custom Generated Bookstack Configuration! Do not edit, instead set ENV Vars
## If you want to use your own configuration files set SETUP_TYPE=MANUAL when starting container
## Last Generated on $(date)

APP_ENV=production
APP_DEBUG=${APP_DEBUG}
APP_KEY=${APP_KEY}
APP_URL=${SITE_URL}
APP_LANG=${LANGUAGE}
APP_AUTO_LANG_PUBLIC=${LANGUAGE_AUTO_DETECT}
APP_TIMEZONE=${TIMEZONE}
APP_THEME=${THEME}
APP_DEFAULT_DARK_MODE=${DEFAULT_DARK_MODE}
DB_HOST=${DB_HOST}
DB_PORT=${DB_PORT}
DB_DATABASE=${DB_NAME}
DB_USERNAME=${DB_USER}
DB_PASSWORD=${DB_PASS}
${mail}
FILE_UPLOAD_SIZE_LIMIT=${FILE_UPLOAD_MAX_SIZE}
CACHE_DRIVER=${CACHE_DRIVER}
SESSION_DRIVER=${SESSION_DRIVER}
${driver_options}
SESSION_LIFETIME=${SESSION_LIFETIME}
SESSION_COOKIE_NAME=${SESSION_COOKIE_NAME}
SESSION_SECURE_COOKIE=${SESSION_SECURE_COOKIE}
CACHE_PREFIX=${CACHE_PREFIX}
QUEUE_CONNECTION=${QUEUE_CONNECTION}
DISABLE_EXTERNAL_SERVICES=${DISABLE_EXTERNAL_SERVICES}
DRAWIO=${drawio}
APP_VIEWS_BOOKS=${VIEW_BOOKS}
APP_VIEWS_BOOKSHELVES=${VIEW_SHELVES}
RECYCLE_BIN_LIFETIME=${RECYCLE_BIN_LIFETIME}
REVISION_LIMIT=${REVISION_LIMIT}
ALLOW_CONTENT_SCRIPTS=${ALLOW_CONTENT_SCRIPTS}
ALLOW_ROBOTS=${ALLOW_ROBOTS}
API_DEFAULT_ITEM_COUNT=${API_DEFAULT_ITEM_COUNT}
API_MAX_ITEM_COUNT=${API_DEFAULT_MAX_ITEM_COUNT}
API_REQUESTS_PER_MIN=${API_REQUESTS_PER_MIN}
ALLOWED_IFRAME_SOURCES="${ALLOWED_IFRAME_SOURCES}"
AUTH_AUTO_INITIATE=${ENABLE_AUTO_LOGIN,,}
LOG_FAILED_LOGIN_MESSAGE=false
LOG_FAILED_LOGIN_CHANNEL=errorlog_plainserver
IP_ADDRESS_PRECISION=4
${storage}
${authentication}
${sso}
${login}
${avatar}
${iframehosts}
${ssrhosts}
EOF

    chown -R "${NGINX_USER}":"${NGINX_GROUP}" "${NGINX_WEBROOT}"/.env
    chmod 0755 "${NGINX_WEBROOT}"/.env
fi

## Generate Key
cd "${NGINX_WEBROOT}"
silent sudo -u "${NGINX_USER}" php artisan key:generate --force

## Cleanup
cd "${NGINX_WEBROOT}"/
silent sudo -u "${NGINX_USER}" php artisan cache:clear
silent sudo -u "${NGINX_USER}" php artisan view:clear

### Check to see if DB is populated
transform_file_var \
                DB_HOST \
                DB_NAME \
                DB_PASS \
                DB_PORT \
                DB_USER
db_ready mariadb

mysql -u "$DB_USER" -p"$DB_PASS" -P"${DB_PORT}" -h"$DB_HOST" -e "use ""$DB_NAME""; SELECT * FROM users;" >/dev/null 2>&1
if [ $? -gt 0 ]; then
    ### Perform Database Installation Routines
    print_warn "Detected empty Database - Setting up - Please wait.."
    sleep 5
    silent sudo -u "${NGINX_USER}" php artisan migrate --force
    silent sudo -u "${NGINX_USER}" php artisan cache:clear
    silent sudo -u "${NGINX_USER}" php artisan view:clear

    ### Create Admin User
    print_notice "Creating Administrative User"
    mysql -u "$DB_USER" -p"$DB_PASS" -h"$DB_HOST" -P"${DB_PORT}" -e "use ""$DB_NAME""; DELETE FROM users where id=1;"
    transform_file_var \
                    ADMIN_EMAIL \
                    ADMIN_NAME \
                    ADMIN_PASS
    sudo -u "${NGINX_USER}" php ${NGINX_WEBROOT}/artisan bookstack:create-admin --no-ansi --email="${ADMIN_EMAIL}" --name="${ADMIN_NAME}" --password="${ADMIN_PASS}"
fi

custom_files "${CONTAINER_CUSTOM_PATH}" "${NGINX_WEBROOT}" "${NGINX_USER}" "${NGINX_GROUP}"
custom_scripts

cd "${NGINX_WEBROOT}"
chown -R "${NGINX_USER}":"${NGINX_GROUP}" "${NGINX_WEBROOT}"
chmod ug+rwx "${NGINX_WEBROOT}"

print_warn "Running any Database Migrations"
cd "${NGINX_WEBROOT}"
silent sudo -u "${NGINX_USER}" php artisan migrate --no-ansi --force

### Add alias for running artisan
cat >> /root/.bashrc <<EOF
function artisan() {
      export oldpwd="\$(pwd)"
      cd ${NGINX_WEBROOT}
      sudo -u ${NGINX_USER} php artisan "\$@"
      cd "\${oldpwd}"
}
EOF

liftoff
